// Code generated by MockGen. DO NOT EDIT.
// Source: ./gke/gke.go

// Package mock_gke is a generated GoMock package.
package mock_gke

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	gke "github.com/na-ga/gke-node-optimizer/gke"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetCluster mocks base method
func (m *MockClient) GetCluster(ctx context.Context) (*gke.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", ctx)
	ret0, _ := ret[0].(*gke.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster
func (mr *MockClientMockRecorder) GetCluster(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockClient)(nil).GetCluster), ctx)
}

// GetNodePool mocks base method
func (m *MockClient) GetNodePool(ctx context.Context, nodePoolName string) (*gke.NodePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodePool", ctx, nodePoolName)
	ret0, _ := ret[0].(*gke.NodePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodePool indicates an expected call of GetNodePool
func (mr *MockClientMockRecorder) GetNodePool(ctx, nodePoolName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodePool", reflect.TypeOf((*MockClient)(nil).GetNodePool), ctx, nodePoolName)
}

// GetNodePoolList mocks base method
func (m *MockClient) GetNodePoolList(ctx context.Context) ([]*gke.NodePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodePoolList", ctx)
	ret0, _ := ret[0].([]*gke.NodePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodePoolList indicates an expected call of GetNodePoolList
func (mr *MockClientMockRecorder) GetNodePoolList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodePoolList", reflect.TypeOf((*MockClient)(nil).GetNodePoolList), ctx)
}

// GetNode mocks base method
func (m *MockClient) GetNode(nodeName string) (*gke.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", nodeName)
	ret0, _ := ret[0].(*gke.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode
func (mr *MockClientMockRecorder) GetNode(nodeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockClient)(nil).GetNode), nodeName)
}

// GetNodeList mocks base method
func (m *MockClient) GetNodeList() ([]*gke.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeList")
	ret0, _ := ret[0].([]*gke.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeList indicates an expected call of GetNodeList
func (mr *MockClientMockRecorder) GetNodeList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeList", reflect.TypeOf((*MockClient)(nil).GetNodeList))
}

// GetPod mocks base method
func (m *MockClient) GetPod(podName string) (*gke.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPod", podName)
	ret0, _ := ret[0].(*gke.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPod indicates an expected call of GetPod
func (mr *MockClientMockRecorder) GetPod(podName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPod", reflect.TypeOf((*MockClient)(nil).GetPod), podName)
}

// GetPodListByNodeName mocks base method
func (m *MockClient) GetPodListByNodeName(nodeName string) ([]*gke.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodListByNodeName", nodeName)
	ret0, _ := ret[0].([]*gke.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodListByNodeName indicates an expected call of GetPodListByNodeName
func (mr *MockClientMockRecorder) GetPodListByNodeName(nodeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodListByNodeName", reflect.TypeOf((*MockClient)(nil).GetPodListByNodeName), nodeName)
}

// RefreshNode mocks base method
func (m *MockClient) RefreshNode(ctx context.Context, nodeName string) ([]*gke.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshNode", ctx, nodeName)
	ret0, _ := ret[0].([]*gke.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshNode indicates an expected call of RefreshNode
func (mr *MockClientMockRecorder) RefreshNode(ctx, nodeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshNode", reflect.TypeOf((*MockClient)(nil).RefreshNode), ctx, nodeName)
}

// RefreshNodes mocks base method
func (m *MockClient) RefreshNodes(ctx context.Context, nodeNames []string) ([]*gke.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshNodes", ctx, nodeNames)
	ret0, _ := ret[0].([]*gke.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshNodes indicates an expected call of RefreshNodes
func (mr *MockClientMockRecorder) RefreshNodes(ctx, nodeNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshNodes", reflect.TypeOf((*MockClient)(nil).RefreshNodes), ctx, nodeNames)
}
